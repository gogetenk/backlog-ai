@page "/"
@using AgileMind.Web.Components
@using AgileMind.Web.Components.Areas.Dashboard
@using AgileMind.Web.Components.Services
@using static AgileMind.Web.Components.Services.ApiService
@inject IApiService ApiService

@if (backlogItems != null && backlogItems.Any())
{
    <div class="w-[80%] grid grid-cols-1 sm:grid-cols-1 md:grid-cols-1 lg:grid-cols-2 xl:grid-cols-4 gap-6 auto-cols-max">
        @for (int i = 0; i < backlogItems.Count; i++)
        {

            <div class="animate-fadeInUp" style="animation-delay: @(i * 100)ms;">
                <BacklogCard Title="@backlogItems[i].Title"
                             ShortDescription="@backlogItems[i].ShortDescription"
                             DetailedDescription="@backlogItems[i].DetailedDescription" />
            </div>
        }
    </div>
}
else
{
    <div class="w-[80%] flex flex-wrap gap-6">
        <div class="w-full bg-gray-800 text-white flex flex-col items-center justify-center p-10 rounded-lg">
            <svg xmlns="http://www.w3.org/2000/svg"
                 width="24"
                 height="24"
                 viewBox="0 0 24 24"
                 fill="none"
                 stroke="currentColor"
                 stroke-width="2"
                 stroke-linecap="round"
                 stroke-linejoin="round"
                 class="w-20 h-20 text-white">
                <path d="M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z"></path>
                <path d="m3.3 7 8.7 5 8.7-5"></path>
                <path d="M12 22V12"></path>
            </svg>
            <h2 class="text-2xl font-bold mt-4">No Stories Available</h2>
            <p class="text-gray-500 mt-2">Please enter a prompt to create a backlog.</p>
        </div>
    </div>
}

@code {
    private List<BacklogItem> backlogItems;

    protected override async Task OnInitializedAsync()
    {
        await LoadBacklogItems();
    }

    // private async Task LoadBacklogItems()
    // {
    //     try
    //     {
    //         // Remplacez ceci par l'appel API réel pour récupérer les user stories
    //         backlogItems = await ApiService.GetBacklogItemsAsync();
    //     }
    //     catch (Exception ex)
    //     {
    //         // Gérer les exceptions ici
    //     }
    // }

    private async Task LoadBacklogItems()
    {
        // Données factices pour les tests
        backlogItems = new List<BacklogItem>
        {
            new BacklogItem("User Story 1", "Brève description", "Description détaillée de User Story 1 "),
            new BacklogItem("User Story 2", "Brève description", "Description détaillée de User Story 2"),
            new BacklogItem("User Story 3", "Brève description", "Description détaillée de User Story 3"),
            new BacklogItem("User Story 4", "Brève description", "Description détaillée de User Story 4"),
            new BacklogItem("User Story 5", "Brève description", "Description détaillée de User Story 5"),
            new BacklogItem("User Story 6", "Brève description", "Description détaillée de User Story 6"),
            new BacklogItem("User Story 7", "Brève description", "Description détaillée de User Story 7")
        };
    }
}

